schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Applicant implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String!
  password: String!
  qualification: String!
  jobStatus: String!
  aboutMe: String
  programmingLanguages: [ProgrammingLanguage!]!
  jobApplicants: [JobApplicant!]!
}

"A connection to a list of items."
type ApplicantConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ApplicantEdge!]
  "A flattened list of the nodes."
  nodes: [Applicant!]
}

"An edge in a connection."
type ApplicantEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Applicant!
}

type ApplicantQueries {
  attendees(first: Int after: String last: Int before: String): ApplicantConnection
  attendeeById(id: ID!): Applicant!
  attendeesById(ids: [ID!]!): [Applicant!]!
}

type Company {
  id: Int!
  name: String!
}

type Job {
  id: Int!
  name: String!
  company: Company!
  jobApplicants: [JobApplicant!]!
}

type JobApplicant {
  jobId: Int!
  job: Job
  applicantId: Int!
  applicant: Applicant
}

type Mutation {
  registerAttendee(input: RegisterApplicantInput!): RegisterApplicantPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type ProgrammingLanguage {
  id: Int!
  name: String!
  type: String!
  dateStarted: DateTime!
  proficiencyLevel: Int!
}

type Query {
  node(id: ID!): Node
}

type RegisterApplicantPayload {
  applicant: Applicant
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}

input RegisterApplicantInput {
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String!
  password: String!
  qualification: String!
  jobStatus: String!
  aboutMe: String
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")
